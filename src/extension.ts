import type { ExtensionContext, OutputChannel, StatusBarItem } from "vscode";
import { window, StatusBarAlignment, extensions, workspace, env, Uri } from 'vscode';
import { GlobalStateManager } from "./GlobalStateManager";
import { gte as semverGte } from 'semver';

export class Extension {
    public globalStateManager: GlobalStateManager;

    protected static EXTENSION_ID = 'RokuCommunity.brightscript';

    protected chanperfStatusBar: StatusBarItem;

    protected outputChannels = {
        /**
         * The primary output channel for a debug session which shows IO from the remote Roku device
         */
        debugConsole: null as OutputChannel,
        /**
         * Output from the scenegraph telnet commands connection
         */
        sceneGraphCommands: null as OutputChannel,
        /**
         * Debug output from the debug-server. These logs are generated by the debug server
         */
        debugServer: null as OutputChannel
    }

    public async activate(context: ExtensionContext) {

        this.globalStateManager = new GlobalStateManager(context);

        this.chanperfStatusBar = window.createStatusBarItem(StatusBarAlignment.Right);

        this.createOutputChannels();

        this.handleOutputPanelStartupBehavior();

        const { previousVersion, currentVersion } = this.trackExtensionVersion();
        this.showWelcomeOrWhatsNew(previousVersion, currentVersion);
    }

    /**
     * Handle output panel focus/show functionality based on user settings
     */
    private handleOutputPanelStartupBehavior() {
        let config = workspace.getConfiguration('brightscript');
        let startupBehavior: string = config.outputPanelStartupBehavior?.toString().toLowerCase();
        if (!startupBehavior) {
            // deprecated legacy config value
            //focus the output panel on extension startup (only if configured to do so...defaults to false)
            startupBehavior = config?.focusOutputPanelOnStartup === true ? 'focus' : undefined;
        }
        if (startupBehavior === 'show') {
            //show the output panel on extension startup without taking focus (only if configured to do so...defaults to 'nothing')
            this.outputChannels.debugConsole.show(true);
        } else if (startupBehavior === 'focus') {
            //focus the output panel on extension startup
            this.outputChannels.debugConsole.show();
        }
    }

    private createOutputChannels() {
        this.outputChannels = {
            debugConsole: window.createOutputChannel('BrightScript Log'),
            sceneGraphCommands: window.createOutputChannel('SceneGraph Debug Commands Log'),
            debugServer: window.createOutputChannel('BrightScript Debug Server')
        };
        this.outputChannels.debugServer.appendLine('Extension startup');
    }

    /**
     * Store the current version of the extension in extension storage, and then return the previous version and current version
     */
    private trackExtensionVersion() {
        const previousVersion = this.globalStateManager.lastRunExtensionVersion;
        const currentVersion = extensions.getExtension(Extension.EXTENSION_ID)?.packageJSON.version;
        //update the tracked version of the extension
        this.globalStateManager.lastRunExtensionVersion = currentVersion;
        return {
            previousVersion,
            currentVersion
        }
    }

    public async showWelcomeOrWhatsNew(lastRunExtensionVersion: string, currentExtensionVersion: string) {
        let config = workspace.getConfiguration('brightscript');
        let isReleaseNotificationsEnabled = config.get('enableReleaseNotifications') === false ? false : true;
        //this is the first launch of the extension
        if (lastRunExtensionVersion === undefined) {

            //if release notifications are enabled
            //TODO once we have the welcome page content prepared, remove the `&& false` from the condition below
            if (isReleaseNotificationsEnabled && false) {
                let viewText = 'View the get started guide';
                let response = await window.showInformationMessage(
                    'Thank you for installing the BrightScript VSCode extension. Click the button below to read some tips on how to get the most out of this extension.',
                    viewText
                );
                if (response === viewText) {
                    env.openExternal(Uri.parse('https://github.com/rokucommunity/vscode-brightscript-language/blob/master/Welcome.md'));
                }
            }
            this.globalStateManager.lastSeenReleaseNotesVersion = currentExtensionVersion;
            return;
        }
        //List of version numbers that should prompt the ReleaseNotes page.
        //these should be in highest-to-lowest order, because we will launch the highest version
        let versionWhitelist = [
            '2.0.0'
        ];
        for (let whitelistVersion of versionWhitelist) {
            if (
                //if the current version is larger than the whitelist version
                semverGte(whitelistVersion, lastRunExtensionVersion) &&
                //if the user hasn't seen this popup before
                this.globalStateManager.lastSeenReleaseNotesVersion !== whitelistVersion &&
                //if ReleaseNote popups are enabled
                isReleaseNotificationsEnabled
            ) {
                //mark this version as viewed
                this.globalStateManager.lastSeenReleaseNotesVersion = whitelistVersion;
                let viewText = 'View Release Notes';
                let response = await window.showInformationMessage(
                    `BrightScript Language v${whitelistVersion} includes significant changes from previous versions. Please take a moment to review the release notes.`,
                    viewText
                );
                if (response === viewText) {
                    env.openExternal(Uri.parse(`https://github.com/rokucommunity/vscode-brightscript-language/blob/master/ReleaseNotes.md#${whitelistVersion}`));
                }
                this.globalStateManager.lastSeenReleaseNotesVersion = currentExtensionVersion;
            }
        }
    }
}